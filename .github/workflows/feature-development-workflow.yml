name: Feature Development Build

on:
  push:
    branches-ignore: [development, staging, production, release]
  workflow_dispatch:

jobs:

  Build:

    runs-on: ubuntu-latest

    environment:
      name: Test

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run the flake8 linter
      run: flake8

    - name: Run the pylint linter
      run: pylint --rcfile=.pylintrc ./api

    # - name: Run the mypy linter
    #   run: mypy -p api

    - name: Create the Test Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo FLASK_DEBUG=${{secrets.FLASK_DEBUG}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
        echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

        echo FIREHOSE_DELIVERY_STREAM=${{secrets.FIREHOSE_DELIVERY_STREAM}} >> .env

        echo AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} >> .env
        echo AWS_ACCESS_SECRET=${{secrets.AWS_ACCESS_SECRET}} >> .env
        echo AWS_REGION=${{secrets.AWS_REGION}} >> .env
        echo S3_BUCKET=${{secrets.S3_BUCKET}} >> .env
        echo QUEUE_URL=${{secrets.QUEUE_URL}} >> .env


    - name: Create the test tables
      run: |
        python manage.py create_db

    - name: Test with pytest
      run: |
        if [ -d tests ] || [ -d ./services/web/test ]; then python -m pytest; fi

    - name: Pytest Coverage
      run: |
        if [ -d tests ] || [ -d test ]; then coverage run -m pytest; fi
        if [ -d tests ] || [ -d test ]; then coverage report -m; fi

    - name: Coverage Report
      run: |
        if [ -d tests ] || [ -d test ]; then coverage xml -m; fi

  Test-Local:

    runs-on: ubuntu-latest

    environment:
      name: Development

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    needs: [Build]

    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create the Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo FLASK_DEBUG=${{secrets.FLASK_DEBUG}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
        echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

        echo FIREHOSE_DELIVERY_STREAM=${{secrets.FIREHOSE_DELIVERY_STREAM}} >> .env

        echo AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} >> .env
        echo AWS_ACCESS_SECRET=${{secrets.AWS_ACCESS_SECRET}} >> .env
        echo AWS_REGION=${{secrets.AWS_REGION}} >> .env
        echo S3_BUCKET=${{secrets.S3_BUCKET}} >> .env
        echo QUEUE_URL=${{secrets.QUEUE_URL}} >> .env

    - name: Create the development tables
      run: |
        python manage.py create_db

    - name: Test application
      run: |
        python manage.py run &
        sleep 10
        curl http://127.0.0.1:5000/
