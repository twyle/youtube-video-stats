name: "Development Build"

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
  workflow_dispatch:

jobs:

  # Build:

  #   runs-on: ubuntu-latest

  #   environment:
  #     name: Test

  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: ${{secrets.POSTGRES_USER}}
  #         POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  #         POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
  #         POSTGRES_DB: ${{secrets.POSTGRES_DB}}
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   strategy:
  #     matrix:
  #       python-version: [3.7, 3.8, 3.9]

  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v2

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
  #       if [ -f ./services/web/requirements.txt ]; then pip install -r ./services/web/requirements.txt; fi

  #   - name: Run the flake8 linter
  #     run: flake8

  #   - name: Run the pylint linter
  #     run: pylint --rcfile=.pylintrc ./services/web/api/

  #   # - name: Run the mypy linter
  #   #   run: mypy -p api

  #   - name: Create the Test Environment variables
  #     run: |
  #       touch .env
  #       echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
  #       echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
  #       echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
  #       echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
  #       echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
  #       echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
  #       echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
  #       echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

  #       echo MAIL_HOST=${{secrets.MAIL_HOST}} >> .env
  #       echo MAIL_PORT=${{secrets.MAIL_PORT}} >> .env
  #       echo MAIL_USERNAME=${{secrets.MAIL_USERNAME}} >> .env
  #       echo MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}} >> .env

  #       echo FIREHOSE_DELIVERY_STREAM=${{secrets.FIREHOSE_DELIVERY_STREAM}} >> .env

  #       echo AWS_KEY=${{secrets.AWS_KEY}} >> .env
  #       echo AWS_SECRET=${{secrets.AWS_SECRET}} >> .env
  #       echo AWS_REGION=${{secrets.AWS_REGION}} >> .env

  #   - name: Create the test tables
  #     run: |
  #       python ./services/web/manage.py create_db

  #   - name: Test with pytest
  #     run: |
  #       if [ -d ./services/web/tests ] || [ -d ./services/web/test ]; then python -m pytest; fi

  #   - name: Pytest Coverage
  #     run: |
  #       if [ -d ./services/web/tests ] || [ -d ./services/web/test ]; then coverage run -m pytest; fi
  #       if [ -d ./services/web/tests ] || [ -d ./services/web/test ]; then coverage report -m; fi

  #   - name: Coverage Report
  #     run: coverage xml

  # Test-Local:

  #   runs-on: ubuntu-latest

  #   environment:
  #     name: Development

  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: ${{secrets.POSTGRES_USER}}
  #         POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  #         POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
  #         POSTGRES_DB: ${{secrets.POSTGRES_DB}}
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   needs: [Build]

  #   strategy:
  #     matrix:
  #       python-version: [3.7, 3.8, 3.9]

  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v2

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       if [ -f ./services/web/requirements-dev.txt ]; then pip install -r ./services/web/requirements-dev.txt; fi
  #       if [ -f ./services/web/requirements.txt ]; then pip install -r ./services/web/requirements.txt; fi

  #   - name: Create the Environment variables
  #     run: |
  #       touch .env
  #       echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
  #       echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
  #       echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
  #       echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
  #       echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
  #       echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
  #       echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
  #       echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

  #       echo MAIL_HOST=${{secrets.MAIL_HOST}} >> .env
  #       echo MAIL_PORT=${{secrets.MAIL_PORT}} >> .env
  #       echo MAIL_USERNAME=${{secrets.MAIL_USERNAME}} >> .env
  #       echo MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}} >> .env

  #       echo FIREHOSE_DELIVERY_STREAM=${{secrets.FIREHOSE_DELIVERY_STREAM}} >> .env

  #       echo AWS_KEY=${{secrets.AWS_KEY}} >> .env
  #       echo AWS_SECRET=${{secrets.AWS_SECRET}} >> .env
  #       echo AWS_REGION=${{secrets.AWS_REGION}} >> .env

  #   - name: Create the development tables
  #     run: |
  #       python ./services/web/manage.py create_db

  #   - name: Test application
  #     run: |
  #       python ./services/web/manage.py seed_db
  #       python ./services/web/manage.py run &
  #       sleep 10
  #       curl http://127.0.0.1:5000/
  #       curl http://127.0.0.1:5000/users

  # DeployDev:
  #   name: Deploy to Dev
  #   # if: github.event_name == 'pull_request'
  #   # needs: [Test-Local]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: Development

  #   steps:

  #     - name: Deploy
  #       run: echo I am deploying the api to AWS

  #     - name: Deploy in EC2
  #       env:
  #         PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  #         HOST_NAME : ${{ secrets.HOST_NAME  }}
  #         USER_NAME : ${{ secrets.USER_NAME  }}
  #         USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
  #         APP_DIR: ${{secrets.APP_DIR}}

  #       run: |
  #         echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
  #         ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
  #           cd ${APP_DIR} &&
  #           git pull &&
  #           echo ${USER_PASSWORD} | sudo -S docker-compose down -v && docker-compose -f docker-compose-prod.yml up --build -d "

  Test-Remote:
    name: Test Remote Deployment
    # needs: [DeployDev]
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:
    - name: Test application
      run: |
        sleep 5
        curl ${{ secrets.HOST_NAME  }}:5000 | grep "api"