name: "Development Build"

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest
    environment:
      name: Test
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run the flake8 linter
      run: flake8

    # - name: Run the pylint linter
    #   run: pylint --rcfile=.pylintrc ./api

    # - name: Run the mypy linter
    #   run: mypy -p api

    - name: Create the Test Environment variables
      run: |
        touch .env
        echo ${{vars.FLASK_APP}}
        echo FLASK_APP=${{vars.FLASK_APP}} >> .env
        echo FLASK_ENV=${{vars.FLASK_ENV}} >> .env
        echo FLASK_DEBUG=${{vars.FLASK_DEBUG}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env

  Test-Local:
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: Test
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create the Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{vars.FLASK_APP}} >> .env
        echo FLASK_ENV=${{vars.FLASK_ENV}} >> .env
        echo FLASK_DEBUG=${{vars.FLASK_DEBUG}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env

    - name: Test application
      run: |
        python services/app/manage.py run &
        sleep 10
        curl http://127.0.0.1:5000/ | grep "stats API"

  DeployDev:
    name: Deploy to Dev
    if: github.event_name == 'pull_request'
    needs: [Test-Local]
    runs-on: ubuntu-latest
    environment:
      name: Development
    steps:
    - name: Deploy
      run: echo I am deploying the api to AWS

    - name: Deploy in EC2
      env:
        PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
        HOST_NAME : ${{ secrets.HOST_NAME  }}
        USER_NAME : ${{ secrets.USER_NAME  }}
        USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
        APP_DIR: ${{secrets.APP_DIR}}

      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
          cd ${APP_DIR} &&
          git pull &&
          echo ${USER_PASSWORD} | sudo -S docker-compose down -v && docker-compose up --build -d "

  Test-Remote:
    name: Test Remote Deployment
    needs: [DeployDev]
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:
    - name: Test application
      run: |
        sleep 5
        curl ${{ secrets.HOST_NAME  }}:5000 | grep "stats API"
